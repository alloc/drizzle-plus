diff --git a/sql/sql.js b/sql/sql.js
index ccd38f7..8971b8a 100644
--- a/sql/sql.js
+++ b/sql/sql.js
@@ -162,11 +162,13 @@ class SQL {
         if (chunk._.isWith) {
           return { sql: escapeName(chunk._.alias), params: [] };
         }
+        const columnList = chunk._.columnList ? sql` (${sql.join(chunk._.columnList.map(sql.identifier), new StringChunk(","))})` : void 0;
         return this.buildQueryFromSourceParams([
           new StringChunk("("),
           chunk._.sql,
           new StringChunk(") "),
-          new Name(chunk._.alias)
+          new Name(chunk._.alias),
+          columnList
         ], config);
       }
       if (isPgEnum(chunk)) {
diff --git a/subquery.d.ts b/subquery.d.ts
index e5e7ca8..a038dfc 100644
--- a/subquery.d.ts
+++ b/subquery.d.ts
@@ -11,8 +11,9 @@ export declare class Subquery<TAlias extends string = string, TSelectedFields ex
         alias: TAlias;
         isWith: boolean;
         usedTables?: string[];
+        columnList: string[] | undefined;
     };
-    constructor(sql: SQL, fields: TSelectedFields, alias: string, isWith?: boolean, usedTables?: string[]);
+    constructor(sql: SQL, fields: TSelectedFields, alias: string, isWith?: boolean, usedTables?: string[], columnList?: string[]);
 }
 export declare class WithSubquery<TAlias extends string = string, TSelection extends Record<string, unknown> = Record<string, unknown>> extends Subquery<TAlias, TSelection> {
     static readonly [entityKind]: string;
diff --git a/subquery.js b/subquery.js
index 296522b..1700d80 100644
--- a/subquery.js
+++ b/subquery.js
@@ -1,14 +1,15 @@
 import { entityKind } from "./entity.js";
 class Subquery {
   static [entityKind] = "Subquery";
-  constructor(sql, fields, alias, isWith = false, usedTables = []) {
+  constructor(sql, fields, alias, isWith = false, usedTables = [], columnList) {
     this._ = {
       brand: "Subquery",
       sql,
       selectedFields: fields,
       alias,
       isWith,
-      usedTables
+      usedTables,
+      columnList
     };
   }
   // getSQL(): SQL<unknown> {
